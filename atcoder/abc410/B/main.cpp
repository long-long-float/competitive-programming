#include <algorithm>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <ctime>
#include <deque>
#include <fstream>
#include <functional>
#include <iostream>
#include <map>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>
using namespace std;

// Generated by 2.14.0 https://github.com/kyuridenamida/atcoder-tools  (tips:
// You use the default template now. You can remove this line by using your
// custom template)
int main() {
  int N, Q, X[101];

  cin >> N >> Q;
  for (int i = 0; i < Q; i++) {
    cin >> X[i];
  }

  int boxes[101] = {0};
  vector<int> results;

  for (int i = 0; i < Q; i++) {
    if (X[i] >= 1) {
      boxes[X[i]]++;
      results.push_back(X[i]);
    } else {
      int min_box_index = -1;
      int min_box_value =
          1000000; // A large number to ensure we find the minimum
      for (int j = 1; j <= N; j++) {
        if (boxes[j] < min_box_value) {
          min_box_value = boxes[j];
          min_box_index = j;
        }
      }

      if (min_box_index != -1) {
        boxes[min_box_index]++;
        results.push_back(min_box_index);
      }
    }
  }

  for (int i = 0; i < results.size(); i++) {
    cout << results[i] << (i < results.size() - 1 ? " " : "\n");
  }

  return 0;
}
